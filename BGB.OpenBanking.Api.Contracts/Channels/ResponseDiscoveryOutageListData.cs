/*
 * APIs OpenData do Open Banking Brasil
 *
 * As APIs descritas neste documento são referentes as APIs da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BGB.OpenBanking.Api.Contracts.Channels
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class ResponseDiscoveryOutageListData : IEquatable<ResponseDiscoveryOutageListData>
    {
        /// <summary>
        /// Data e hora planejada do início da indisponibilidade
        /// </summary>
        /// <value>Data e hora planejada do início da indisponibilidade</value>
        [Required]
        [DataMember(Name = "outageTime")]
        public string OutageTime { get; set; }

        /// <summary>
        /// Duração prevista da indisponibilidade
        /// </summary>
        /// <value>Duração prevista da indisponibilidade</value>
        [Required]
        [DataMember(Name = "duration")]
        public string Duration { get; set; }

        /// <summary>
        /// Flag que indica se a indisponibilidade é parcial (atingindo apenas alguns end points) ou total (atingindo todos os end points)
        /// </summary>
        /// <value>Flag que indica se a indisponibilidade é parcial (atingindo apenas alguns end points) ou total (atingindo todos os end points)</value>
        [Required]
        [DataMember(Name = "isPartial")]
        public bool? IsPartial { get; set; }

        /// <summary>
        /// Explicação sobre os motivos da indisponibilidade.
        /// </summary>
        /// <value>Explicação sobre os motivos da indisponibilidade.</value>
        [Required]
        [DataMember(Name = "explanation")]
        public string Explanation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseDiscoveryOutageListData {\n");
            sb.Append("  OutageTime: ").Append(OutageTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  IsPartial: ").Append(IsPartial).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResponseDiscoveryOutageListData)obj);
        }

        /// <summary>
        /// Returns true if ResponseDiscoveryOutageListData instances are equal
        /// </summary>
        /// <param name="other">Instance of ResponseDiscoveryOutageListData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseDiscoveryOutageListData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    OutageTime == other.OutageTime ||
                    OutageTime != null &&
                    OutageTime.Equals(other.OutageTime)
                ) &&
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) &&
                (
                    IsPartial == other.IsPartial ||
                    IsPartial != null &&
                    IsPartial.Equals(other.IsPartial)
                ) &&
                (
                    Explanation == other.Explanation ||
                    Explanation != null &&
                    Explanation.Equals(other.Explanation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (OutageTime != null)
                    hashCode = hashCode * 59 + OutageTime.GetHashCode();
                if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                if (IsPartial != null)
                    hashCode = hashCode * 59 + IsPartial.GetHashCode();
                if (Explanation != null)
                    hashCode = hashCode * 59 + Explanation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(ResponseDiscoveryOutageListData left, ResponseDiscoveryOutageListData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResponseDiscoveryOutageListData left, ResponseDiscoveryOutageListData right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}