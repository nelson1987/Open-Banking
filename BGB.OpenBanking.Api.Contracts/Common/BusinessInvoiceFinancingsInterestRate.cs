/*
 * API's OpenData do Open Banking Brasil
 *
 * As API's descritas neste documento são referentes as API's da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace BGB.OpenBanking.Api.Contracts.Common
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class BusinessInvoiceFinancingsInterestRate : IEquatable<BusinessInvoiceFinancingsInterestRate>
    {
        /// <summary>
        /// Lista das taxas referenciais ou indexadores
        /// </summary>
        /// <value>Lista das taxas referenciais ou indexadores</value>
        [Required]
        [DataMember(Name = "fees")]
        public List<InterestRateFee> Fees { get; set; }

        /// <summary>
        /// Lista  das faixas de cobrança da taxa efetiva de remuneração
        /// </summary>
        /// <value>Lista  das faixas de cobrança da taxa efetiva de remuneração</value>
        [Required]
        [DataMember(Name = "applications")]
        public List<ApplicationRate> Applications { get; set; }

        /// <summary>
        /// Percentual mínimo cobrado (taxa efetiva) no mês de referência, para os Direitos Creditórios Descontados contratado  A apuração pode acontecer com até 4 casas decimais. O preenchimento deve respeitar as 4 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.15. Este valor representa 15%. O valor 1 representa 100%)
        /// </summary>
        /// <value>Percentual mínimo cobrado (taxa efetiva) no mês de referência, para os Direitos Creditórios Descontados contratado  A apuração pode acontecer com até 4 casas decimais. O preenchimento deve respeitar as 4 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.15. Este valor representa 15%. O valor 1 representa 100%) </value>
        [Required]
        [DataMember(Name = "minimumRate")]
        public string MinimumRate { get; set; }

        /// <summary>
        /// Percentual máximo cobrado (taxa efetiva) no mês de referência, para os Direitos Creditórios Descontados contratado  A apuração pode acontecer com até 4 casas decimais. O preenchimento deve respeitar as 4 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.15. Este valor representa 15%. O valor 1 representa 100%)
        /// </summary>
        /// <value>Percentual máximo cobrado (taxa efetiva) no mês de referência, para os Direitos Creditórios Descontados contratado  A apuração pode acontecer com até 4 casas decimais. O preenchimento deve respeitar as 4 casas decimais, mesmo que venham preenchidas com zeros (representação de porcentagem p.ex: 0.15. Este valor representa 15%. O valor 1 representa 100%) </value>
        [Required]
        [DataMember(Name = "maximumRate")]
        public string MaximumRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessInvoiceFinancingsInterestRate {\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  MinimumRate: ").Append(MinimumRate).Append("\n");
            sb.Append("  MaximumRate: ").Append(MaximumRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BusinessInvoiceFinancingsInterestRate)obj);
        }

        /// <summary>
        /// Returns true if BusinessInvoiceFinancingsInterestRate instances are equal
        /// </summary>
        /// <param name="other">Instance of BusinessInvoiceFinancingsInterestRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessInvoiceFinancingsInterestRate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Fees == other.Fees ||
                    Fees != null &&
                    Fees.SequenceEqual(other.Fees)
                ) &&
                (
                    Applications == other.Applications ||
                    Applications != null &&
                    Applications.SequenceEqual(other.Applications)
                ) &&
                (
                    MinimumRate == other.MinimumRate ||
                    MinimumRate != null &&
                    MinimumRate.Equals(other.MinimumRate)
                ) &&
                (
                    MaximumRate == other.MaximumRate ||
                    MaximumRate != null &&
                    MaximumRate.Equals(other.MaximumRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Fees != null)
                    hashCode = hashCode * 59 + Fees.GetHashCode();
                if (Applications != null)
                    hashCode = hashCode * 59 + Applications.GetHashCode();
                if (MinimumRate != null)
                    hashCode = hashCode * 59 + MinimumRate.GetHashCode();
                if (MaximumRate != null)
                    hashCode = hashCode * 59 + MaximumRate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(BusinessInvoiceFinancingsInterestRate left, BusinessInvoiceFinancingsInterestRate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BusinessInvoiceFinancingsInterestRate left, BusinessInvoiceFinancingsInterestRate right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}