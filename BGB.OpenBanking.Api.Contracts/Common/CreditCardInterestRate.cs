/*
 * API's OpenData do Open Banking Brasil
 *
 * As API's descritas neste documento são referentes as API's da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BGB.OpenBanking.Api.Contracts.Common
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class CreditCardInterestRate : InterestRate, IEquatable<CreditCardInterestRate>
    {
        /// <summary>
        /// Lista de outras operações de crédito
        /// </summary>
        /// <value>Lista de outras operações de crédito</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum SAQUEACREDITOEnum for SAQUE_A_CREDITO
            /// </summary>
            [EnumMember(Value = "SAQUE_A_CREDITO")]
            SAQUEACREDITOEnum = 0,

            /// <summary>
            /// Enum PAGAMENTOSCONTASEnum for PAGAMENTOS_CONTAS
            /// </summary>
            [EnumMember(Value = "PAGAMENTOS_CONTAS")]
            PAGAMENTOSCONTASEnum = 1,

            /// <summary>
            /// Enum OUTROSEnum for OUTROS
            /// </summary>
            [EnumMember(Value = "OUTROS")]
            OUTROSEnum = 2
        }

        /// <summary>
        /// Lista de outras operações de crédito
        /// </summary>
        /// <value>Lista de outras operações de crédito</value>
        [Required]
        [DataMember(Name = "code")]
        public CodeEnum? Code { get; set; }

        /// <summary>
        /// Campo Texto para descrever outras operações de crédito marcadas como &#x27;OUTROS&#x27;. Se o campo &#x27;code&#x27; vier selecionado com &#x27;OUTROS&#x27; é obrigatório o preenchimento do additionalInfo
        /// </summary>
        /// <value>Campo Texto para descrever outras operações de crédito marcadas como &#x27;OUTROS&#x27;. Se o campo &#x27;code&#x27; vier selecionado com &#x27;OUTROS&#x27; é obrigatório o preenchimento do additionalInfo</value>
        [DataMember(Name = "additionalInfo")]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardInterestRate {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreditCardInterestRate)obj);
        }

        /// <summary>
        /// Returns true if CreditCardInterestRate instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditCardInterestRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardInterestRate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) &&
                (
                    AdditionalInfo == other.AdditionalInfo ||
                    AdditionalInfo != null &&
                    AdditionalInfo.Equals(other.AdditionalInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                if (AdditionalInfo != null)
                    hashCode = hashCode * 59 + AdditionalInfo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(CreditCardInterestRate left, CreditCardInterestRate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreditCardInterestRate left, CreditCardInterestRate right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}