/*
 * API's OpenData do Open Banking Brasil
 *
 * As API's descritas neste documento são referentes as API's da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace BGB.OpenBanking.Api.Contracts.Common
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class AccountsIncomeRate : IEquatable<AccountsIncomeRate>
    {
        /// <summary>
        /// Descrição da Remuneração especificamente para Conta de Poupança. Deve ser preenchido com a determinação legal vigente. Restrição: De preenchimento obrigatório para CONTA_POUPANCA.
        /// </summary>
        /// <value>Descrição da Remuneração especificamente para Conta de Poupança. Deve ser preenchido com a determinação legal vigente. Restrição: De preenchimento obrigatório para CONTA_POUPANCA. </value>
        [DataMember(Name = "savingAccount")]
        public string SavingAccount { get; set; }

        /// <summary>
        /// Percentual em favor do titular da conta de pagamento pré-paga. Campo Livre. Restrição: De preenchimento obrigatório para Conta do Tipo CONTA_PAGAMENTO_PRE_PAGA.
        /// </summary>
        /// <value>Percentual em favor do titular da conta de pagamento pré-paga. Campo Livre. Restrição: De preenchimento obrigatório para Conta do Tipo CONTA_PAGAMENTO_PRE_PAGA. </value>
        [DataMember(Name = "prepaidPaymentAccount")]
        public string PrepaidPaymentAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountsIncomeRate {\n");
            sb.Append("  SavingAccount: ").Append(SavingAccount).Append("\n");
            sb.Append("  PrepaidPaymentAccount: ").Append(PrepaidPaymentAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountsIncomeRate)obj);
        }

        /// <summary>
        /// Returns true if AccountsIncomeRate instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountsIncomeRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountsIncomeRate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    SavingAccount == other.SavingAccount ||
                    SavingAccount != null &&
                    SavingAccount.Equals(other.SavingAccount)
                ) &&
                (
                    PrepaidPaymentAccount == other.PrepaidPaymentAccount ||
                    PrepaidPaymentAccount != null &&
                    PrepaidPaymentAccount.Equals(other.PrepaidPaymentAccount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (SavingAccount != null)
                    hashCode = hashCode * 59 + SavingAccount.GetHashCode();
                if (PrepaidPaymentAccount != null)
                    hashCode = hashCode * 59 + PrepaidPaymentAccount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(AccountsIncomeRate left, AccountsIncomeRate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountsIncomeRate left, AccountsIncomeRate right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}