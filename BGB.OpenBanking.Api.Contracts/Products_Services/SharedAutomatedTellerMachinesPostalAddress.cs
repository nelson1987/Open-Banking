/*
 * APIs OpenData do Open Banking Brasil
 *
 * As APIs descritas neste documento são referentes as APIs da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace BGB.OpenBanking.Api.Contracts.Products_Services
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class SharedAutomatedTellerMachinesPostalAddress : IEquatable<SharedAutomatedTellerMachinesPostalAddress>
    {
        /// <summary>
        /// Deverá trazer toda a informação referente ao endereço da dependência informada: Tipo de logradouro + Nome do logradouro + Número do Logradouro (se não existir usar &#x27; s/n&#x27;) + complemento (se houver), como, p.ex.: &#x27;R Diamatina, 59, bloco 35, fundos&#x27; &#x27;Praça da Boa Vontade s/n&#x27;
        /// </summary>
        /// <value>Deverá trazer toda a informação referente ao endereço da dependência informada: Tipo de logradouro + Nome do logradouro + Número do Logradouro (se não existir usar &#x27; s/n&#x27;) + complemento (se houver), como, p.ex.: &#x27;R Diamatina, 59, bloco 35, fundos&#x27; &#x27;Praça da Boa Vontade s/n&#x27;</value>
        [DataMember(Name = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Complemento
        /// </summary>
        /// <value>Complemento</value>
        [DataMember(Name = "additionalInfo")]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Bairro é uma comunidade ou região localizada em uma cidade ou município de acordo com as suas subdivisões geográficas. p.ex: &#x27;Paraíso&#x27;
        /// </summary>
        /// <value>Bairro é uma comunidade ou região localizada em uma cidade ou município de acordo com as suas subdivisões geográficas. p.ex: &#x27;Paraíso&#x27;</value>
        [DataMember(Name = "districtName")]
        public string DistrictName { get; set; }

        /// <summary>
        /// Localidade: O nome da localidade corresponde à designação da cidade ou município no qual o endereço está localizado. p.ex. &#x27;São Paulo&#x27;
        /// </summary>
        /// <value>Localidade: O nome da localidade corresponde à designação da cidade ou município no qual o endereço está localizado. p.ex. &#x27;São Paulo&#x27;</value>
        [DataMember(Name = "townName")]
        public string TownName { get; set; }

        /// <summary>
        /// Código IBGE do município
        /// </summary>
        /// <value>Código IBGE do município</value>
        [DataMember(Name = "ibgeCode")]
        public string IbgeCode { get; set; }

        /// <summary>
        /// Enumeração referente a cada sigla da unidade da federação que identifica o estado ou o distrito federal, no qual o endereço está localizado. p.ex. 'AC'. São consideradas apenas as siglas para os estados brasileiros
        /// </summary>
        /// <value>Enumeração referente a cada sigla da unidade da federação que identifica o estado ou o distrito federal, no qual o endereço está localizado. p.ex. 'AC'. São consideradas apenas as siglas para os estados brasileiros</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CountrySubDivisionEnum
        {
            /// <summary>
            /// Enum ACEnum for AC
            /// </summary>
            [EnumMember(Value = "AC")]
            ACEnum = 0,

            /// <summary>
            /// Enum ALEnum for AL
            /// </summary>
            [EnumMember(Value = "AL")]
            ALEnum = 1,

            /// <summary>
            /// Enum APEnum for AP
            /// </summary>
            [EnumMember(Value = "AP")]
            APEnum = 2,

            /// <summary>
            /// Enum AMEnum for AM
            /// </summary>
            [EnumMember(Value = "AM")]
            AMEnum = 3,

            /// <summary>
            /// Enum BAEnum for BA
            /// </summary>
            [EnumMember(Value = "BA")]
            BAEnum = 4,

            /// <summary>
            /// Enum CEEnum for CE
            /// </summary>
            [EnumMember(Value = "CE")]
            CEEnum = 5,

            /// <summary>
            /// Enum DFEnum for DF
            /// </summary>
            [EnumMember(Value = "DF")]
            DFEnum = 6,

            /// <summary>
            /// Enum ESEnum for ES
            /// </summary>
            [EnumMember(Value = "ES")]
            ESEnum = 7,

            /// <summary>
            /// Enum GOEnum for GO
            /// </summary>
            [EnumMember(Value = "GO")]
            GOEnum = 8,

            /// <summary>
            /// Enum MAEnum for MA
            /// </summary>
            [EnumMember(Value = "MA")]
            MAEnum = 9,

            /// <summary>
            /// Enum MTEnum for MT
            /// </summary>
            [EnumMember(Value = "MT")]
            MTEnum = 10,

            /// <summary>
            /// Enum MSEnum for MS
            /// </summary>
            [EnumMember(Value = "MS")]
            MSEnum = 11,

            /// <summary>
            /// Enum MGEnum for MG
            /// </summary>
            [EnumMember(Value = "MG")]
            MGEnum = 12,

            /// <summary>
            /// Enum PAEnum for PA
            /// </summary>
            [EnumMember(Value = "PA")]
            PAEnum = 13,

            /// <summary>
            /// Enum PBEnum for PB
            /// </summary>
            [EnumMember(Value = "PB")]
            PBEnum = 14,

            /// <summary>
            /// Enum PREnum for PR
            /// </summary>
            [EnumMember(Value = "PR")]
            PREnum = 15,

            /// <summary>
            /// Enum PEEnum for PE
            /// </summary>
            [EnumMember(Value = "PE")]
            PEEnum = 16,

            /// <summary>
            /// Enum PIEnum for PI
            /// </summary>
            [EnumMember(Value = "PI")]
            PIEnum = 17,

            /// <summary>
            /// Enum RJEnum for RJ
            /// </summary>
            [EnumMember(Value = "RJ")]
            RJEnum = 18,

            /// <summary>
            /// Enum RNEnum for RN
            /// </summary>
            [EnumMember(Value = "RN")]
            RNEnum = 19,

            /// <summary>
            /// Enum RSEnum for RS
            /// </summary>
            [EnumMember(Value = "RS")]
            RSEnum = 20,

            /// <summary>
            /// Enum ROEnum for RO
            /// </summary>
            [EnumMember(Value = "RO")]
            ROEnum = 21,

            /// <summary>
            /// Enum RREnum for RR
            /// </summary>
            [EnumMember(Value = "RR")]
            RREnum = 22,

            /// <summary>
            /// Enum SCEnum for SC
            /// </summary>
            [EnumMember(Value = "SC")]
            SCEnum = 23,

            /// <summary>
            /// Enum SPEnum for SP
            /// </summary>
            [EnumMember(Value = "SP")]
            SPEnum = 24,

            /// <summary>
            /// Enum SEEnum for SE
            /// </summary>
            [EnumMember(Value = "SE")]
            SEEnum = 25,

            /// <summary>
            /// Enum TOEnum for TO
            /// </summary>
            [EnumMember(Value = "TO")]
            TOEnum = 26
        }

        /// <summary>
        /// Enumeração referente a cada sigla da unidade da federação que identifica o estado ou o distrito federal, no qual o endereço está localizado. p.ex. &#x27;AC&#x27;. São consideradas apenas as siglas para os estados brasileiros
        /// </summary>
        /// <value>Enumeração referente a cada sigla da unidade da federação que identifica o estado ou o distrito federal, no qual o endereço está localizado. p.ex. &#x27;AC&#x27;. São consideradas apenas as siglas para os estados brasileiros</value>
        [DataMember(Name = "countrySubDivision")]
        public CountrySubDivisionEnum? CountrySubDivision { get; set; }

        /// <summary>
        /// Código de Endereçamento Postal
        /// </summary>
        /// <value>Código de Endereçamento Postal</value>
        [DataMember(Name = "postCode")]
        public string PostCode { get; set; }

        /// <summary>
        /// Nome do país
        /// </summary>
        /// <value>Nome do país</value>
        [DataMember(Name = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Código do país
        /// </summary>
        /// <value>Código do país</value>
        [DataMember(Name = "countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets GeographicCoordinates
        /// </summary>
        [DataMember(Name = "geographicCoordinates")]
        public GeographicCoordinates GeographicCoordinates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SharedAutomatedTellerMachinesPostalAddress {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  DistrictName: ").Append(DistrictName).Append("\n");
            sb.Append("  TownName: ").Append(TownName).Append("\n");
            sb.Append("  IbgeCode: ").Append(IbgeCode).Append("\n");
            sb.Append("  CountrySubDivision: ").Append(CountrySubDivision).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  GeographicCoordinates: ").Append(GeographicCoordinates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SharedAutomatedTellerMachinesPostalAddress)obj);
        }

        /// <summary>
        /// Returns true if SharedAutomatedTellerMachinesPostalAddress instances are equal
        /// </summary>
        /// <param name="other">Instance of SharedAutomatedTellerMachinesPostalAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SharedAutomatedTellerMachinesPostalAddress other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) &&
                (
                    AdditionalInfo == other.AdditionalInfo ||
                    AdditionalInfo != null &&
                    AdditionalInfo.Equals(other.AdditionalInfo)
                ) &&
                (
                    DistrictName == other.DistrictName ||
                    DistrictName != null &&
                    DistrictName.Equals(other.DistrictName)
                ) &&
                (
                    TownName == other.TownName ||
                    TownName != null &&
                    TownName.Equals(other.TownName)
                ) &&
                (
                    IbgeCode == other.IbgeCode ||
                    IbgeCode != null &&
                    IbgeCode.Equals(other.IbgeCode)
                ) &&
                (
                    CountrySubDivision == other.CountrySubDivision ||
                    CountrySubDivision != null &&
                    CountrySubDivision.Equals(other.CountrySubDivision)
                ) &&
                (
                    PostCode == other.PostCode ||
                    PostCode != null &&
                    PostCode.Equals(other.PostCode)
                ) &&
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) &&
                (
                    CountryCode == other.CountryCode ||
                    CountryCode != null &&
                    CountryCode.Equals(other.CountryCode)
                ) &&
                (
                    GeographicCoordinates == other.GeographicCoordinates ||
                    GeographicCoordinates != null &&
                    GeographicCoordinates.Equals(other.GeographicCoordinates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                if (AdditionalInfo != null)
                    hashCode = hashCode * 59 + AdditionalInfo.GetHashCode();
                if (DistrictName != null)
                    hashCode = hashCode * 59 + DistrictName.GetHashCode();
                if (TownName != null)
                    hashCode = hashCode * 59 + TownName.GetHashCode();
                if (IbgeCode != null)
                    hashCode = hashCode * 59 + IbgeCode.GetHashCode();
                if (CountrySubDivision != null)
                    hashCode = hashCode * 59 + CountrySubDivision.GetHashCode();
                if (PostCode != null)
                    hashCode = hashCode * 59 + PostCode.GetHashCode();
                if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                if (GeographicCoordinates != null)
                    hashCode = hashCode * 59 + GeographicCoordinates.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(SharedAutomatedTellerMachinesPostalAddress left, SharedAutomatedTellerMachinesPostalAddress right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SharedAutomatedTellerMachinesPostalAddress left, SharedAutomatedTellerMachinesPostalAddress right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}