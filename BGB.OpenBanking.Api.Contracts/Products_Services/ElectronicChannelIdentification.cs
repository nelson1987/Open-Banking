/*
 * APIs OpenData do Open Banking Brasil
 *
 * As APIs descritas neste documento são referentes as APIs da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace BGB.OpenBanking.Api.Contracts.Products_Services
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class ElectronicChannelIdentification : IEquatable<ElectronicChannelIdentification>
    {
        /// <summary>
        /// Tipo de canal de atendimento eletrônico
        /// </summary>
        /// <value>Tipo de canal de atendimento eletrônico</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum INTERNETBANKINGEnum for INTERNET_BANKING
            /// </summary>
            [EnumMember(Value = "INTERNET_BANKING")]
            INTERNETBANKINGEnum = 0,

            /// <summary>
            /// Enum MOBILEBANKINGEnum for MOBILE_BANKING
            /// </summary>
            [EnumMember(Value = "MOBILE_BANKING")]
            MOBILEBANKINGEnum = 1,

            /// <summary>
            /// Enum SACEnum for SAC
            /// </summary>
            [EnumMember(Value = "SAC")]
            SACEnum = 2,

            /// <summary>
            /// Enum OUVIDORIAEnum for OUVIDORIA
            /// </summary>
            [EnumMember(Value = "OUVIDORIA")]
            OUVIDORIAEnum = 3,

            /// <summary>
            /// Enum CHATEnum for CHAT
            /// </summary>
            [EnumMember(Value = "CHAT")]
            CHATEnum = 4,

            /// <summary>
            /// Enum OUTROSEnum for OUTROS
            /// </summary>
            [EnumMember(Value = "OUTROS")]
            OUTROSEnum = 5
        }

        /// <summary>
        /// Tipo de canal de atendimento eletrônico
        /// </summary>
        /// <value>Tipo de canal de atendimento eletrônico</value>
        [Required]
        [DataMember(Name = "type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Campo de texto livre para descrever complementação de informações necessárias. De preenchimento obrigatório para  o tipo de canal de atendimento &#x27;OUTROS&#x27; Restrição: Preenchimento obrigatório para o tipo de canal de atendimento &#x27;OUTROS&#x27;
        /// </summary>
        /// <value>Campo de texto livre para descrever complementação de informações necessárias. De preenchimento obrigatório para  o tipo de canal de atendimento &#x27;OUTROS&#x27; Restrição: Preenchimento obrigatório para o tipo de canal de atendimento &#x27;OUTROS&#x27; </value>
        [DataMember(Name = "additionalInfo")]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Lista das URLs que atendem um tipo de canal eletrônico selecionado
        /// </summary>
        /// <value>Lista das URLs que atendem um tipo de canal eletrônico selecionado</value>
        [Required]
        [DataMember(Name = "urls")]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElectronicChannelIdentification {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ElectronicChannelIdentification)obj);
        }

        /// <summary>
        /// Returns true if ElectronicChannelIdentification instances are equal
        /// </summary>
        /// <param name="other">Instance of ElectronicChannelIdentification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectronicChannelIdentification other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) &&
                (
                    AdditionalInfo == other.AdditionalInfo ||
                    AdditionalInfo != null &&
                    AdditionalInfo.Equals(other.AdditionalInfo)
                ) &&
                (
                    Urls == other.Urls ||
                    Urls != null &&
                    Urls.SequenceEqual(other.Urls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (AdditionalInfo != null)
                    hashCode = hashCode * 59 + AdditionalInfo.GetHashCode();
                if (Urls != null)
                    hashCode = hashCode * 59 + Urls.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(ElectronicChannelIdentification left, ElectronicChannelIdentification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ElectronicChannelIdentification left, ElectronicChannelIdentification right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}