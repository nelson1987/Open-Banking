/*
 * API's OpenData do Open Banking Brasil
 *
 * As API's descritas neste documento são referentes as API's da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BGB.OpenBanking.Api.Areas.Common.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreditCardIdentificationCreditCard : IEquatable<CreditCardIdentificationCreditCard>
    { 
        /// <summary>
        /// Categoria de Bandeiras de Cartões de Crédito (Instituidor do arranjo de pagamento). Bandeira é a detentora de todos os direitos e deveres da utilização da marca estampada no cartão, inclusive as bandeiras pertencentes aos emissores. p.ex. \"American Express\", \"Diners Club\" Essas bandeiras estão definidas em documento do BACEN de nome \"Elaboração e Remessa de Informações Relativas aos Cartões de Pagamento  Emissores\"
        /// </summary>
        /// <value>Categoria de Bandeiras de Cartões de Crédito (Instituidor do arranjo de pagamento). Bandeira é a detentora de todos os direitos e deveres da utilização da marca estampada no cartão, inclusive as bandeiras pertencentes aos emissores. p.ex. \"American Express\", \"Diners Club\" Essas bandeiras estão definidas em documento do BACEN de nome \"Elaboração e Remessa de Informações Relativas aos Cartões de Pagamento  Emissores\"</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NetworkEnum
        {
            /// <summary>
            /// Enum VISAEnum for VISA
            /// </summary>
            [EnumMember(Value = "VISA")]
            VISAEnum = 0,
            /// <summary>
            /// Enum MASTERCARDEnum for MASTERCARD
            /// </summary>
            [EnumMember(Value = "MASTERCARD")]
            MASTERCARDEnum = 1,
            /// <summary>
            /// Enum AMERICANEXPRESSEnum for AMERICAN_EXPRESS
            /// </summary>
            [EnumMember(Value = "AMERICAN_EXPRESS")]
            AMERICANEXPRESSEnum = 2,
            /// <summary>
            /// Enum DINERSCLUBEnum for DINERS_CLUB
            /// </summary>
            [EnumMember(Value = "DINERS_CLUB")]
            DINERSCLUBEnum = 3,
            /// <summary>
            /// Enum HIPERCARDEnum for HIPERCARD
            /// </summary>
            [EnumMember(Value = "HIPERCARD")]
            HIPERCARDEnum = 4,
            /// <summary>
            /// Enum BANDEIRAPROPRIAEnum for BANDEIRA_PROPRIA
            /// </summary>
            [EnumMember(Value = "BANDEIRA_PROPRIA")]
            BANDEIRAPROPRIAEnum = 5,
            /// <summary>
            /// Enum CHEQUEELETRONICOEnum for CHEQUE_ELETRONICO
            /// </summary>
            [EnumMember(Value = "CHEQUE_ELETRONICO")]
            CHEQUEELETRONICOEnum = 6,
            /// <summary>
            /// Enum ELOEnum for ELO
            /// </summary>
            [EnumMember(Value = "ELO")]
            ELOEnum = 7,
            /// <summary>
            /// Enum OUTRASEnum for OUTRAS
            /// </summary>
            [EnumMember(Value = "OUTRAS")]
            OUTRASEnum = 8        }

        /// <summary>
        /// Categoria de Bandeiras de Cartões de Crédito (Instituidor do arranjo de pagamento). Bandeira é a detentora de todos os direitos e deveres da utilização da marca estampada no cartão, inclusive as bandeiras pertencentes aos emissores. p.ex. \&quot;American Express\&quot;, \&quot;Diners Club\&quot; Essas bandeiras estão definidas em documento do BACEN de nome \&quot;Elaboração e Remessa de Informações Relativas aos Cartões de Pagamento  Emissores\&quot;
        /// </summary>
        /// <value>Categoria de Bandeiras de Cartões de Crédito (Instituidor do arranjo de pagamento). Bandeira é a detentora de todos os direitos e deveres da utilização da marca estampada no cartão, inclusive as bandeiras pertencentes aos emissores. p.ex. \&quot;American Express\&quot;, \&quot;Diners Club\&quot; Essas bandeiras estão definidas em documento do BACEN de nome \&quot;Elaboração e Remessa de Informações Relativas aos Cartões de Pagamento  Emissores\&quot;</value>
        [Required]
        [DataMember(Name="network")]
        public NetworkEnum? Network { get; set; }

        /// <summary>
        /// Texto livre para especificar categoria de bandeira marcada como &#x27;OUTRAS&#x27;. Campo deve ser obrigatoriamente preenchido se campo network vier selecionado como &#x27;OUTROS&#x27;
        /// </summary>
        /// <value>Texto livre para especificar categoria de bandeira marcada como &#x27;OUTRAS&#x27;. Campo deve ser obrigatoriamente preenchido se campo network vier selecionado como &#x27;OUTROS&#x27;</value>
        [Required]
        [DataMember(Name="additionalInfo")]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardIdentificationCreditCard {\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreditCardIdentificationCreditCard)obj);
        }

        /// <summary>
        /// Returns true if CreditCardIdentificationCreditCard instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditCardIdentificationCreditCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardIdentificationCreditCard other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Network == other.Network ||
                    Network != null &&
                    Network.Equals(other.Network)
                ) && 
                (
                    AdditionalInfo == other.AdditionalInfo ||
                    AdditionalInfo != null &&
                    AdditionalInfo.Equals(other.AdditionalInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Network != null)
                    hashCode = hashCode * 59 + Network.GetHashCode();
                    if (AdditionalInfo != null)
                    hashCode = hashCode * 59 + AdditionalInfo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreditCardIdentificationCreditCard left, CreditCardIdentificationCreditCard right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreditCardIdentificationCreditCard left, CreditCardIdentificationCreditCard right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
