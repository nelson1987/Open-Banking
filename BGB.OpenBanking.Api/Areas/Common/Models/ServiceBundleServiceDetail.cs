/*
 * API's OpenData do Open Banking Brasil
 *
 * As API's descritas neste documento são referentes as API's da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BGB.OpenBanking.Api.Areas.Common.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ServiceBundleServiceDetail : IEquatable<ServiceBundleServiceDetail>
    { 
        /// <summary>
        /// Código que identifica o Serviço que compõe o Pacote de Serviços, podendo ser da lista de Serviços Prioritários ou Outros Serviços. p.ex. segundo Resolução 3.919 do Bacen: &#x27;SAQUE_TERMINAL&#x27;. 
        /// </summary>
        /// <value>Código que identifica o Serviço que compõe o Pacote de Serviços, podendo ser da lista de Serviços Prioritários ou Outros Serviços. p.ex. segundo Resolução 3.919 do Bacen: &#x27;SAQUE_TERMINAL&#x27;. </value>
        [Required]
        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// Fatos geradores de cobrança que incidem sobre serviço que compõe o Pacote de Serviços. 
        /// </summary>
        /// <value>Fatos geradores de cobrança que incidem sobre serviço que compõe o Pacote de Serviços. </value>
        [Required]
        [DataMember(Name="chargingTriggerInfo")]
        public string ChargingTriggerInfo { get; set; }

        /// <summary>
        /// Segundo Resolução  4196, BCB, de 2013: Quantidade de eventos previstos no Pacote de Serviços (Número de eventos incluídos no mês) p.ex.&#x27;2&#x27;. No caso de quantidade ilimitada, reportar 999999 
        /// </summary>
        /// <value>Segundo Resolução  4196, BCB, de 2013: Quantidade de eventos previstos no Pacote de Serviços (Número de eventos incluídos no mês) p.ex.&#x27;2&#x27;. No caso de quantidade ilimitada, reportar 999999 </value>
        [Required]
        [DataMember(Name="eventLimitQuantity")]
        public string EventLimitQuantity { get; set; }

        /// <summary>
        /// Segundo Resolução  4196, BCB, de 2013: Quantidade de eventos previstos no Pacote de Serviços com isenção de Tarifa.p.ex.&#x27;1&#x27;  No caso de quantidade ilimitada, reportar 999999 
        /// </summary>
        /// <value>Segundo Resolução  4196, BCB, de 2013: Quantidade de eventos previstos no Pacote de Serviços com isenção de Tarifa.p.ex.&#x27;1&#x27;  No caso de quantidade ilimitada, reportar 999999 </value>
        [Required]
        [DataMember(Name="freeEventQuantity")]
        public string FreeEventQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceBundleServiceDetail {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ChargingTriggerInfo: ").Append(ChargingTriggerInfo).Append("\n");
            sb.Append("  EventLimitQuantity: ").Append(EventLimitQuantity).Append("\n");
            sb.Append("  FreeEventQuantity: ").Append(FreeEventQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceBundleServiceDetail)obj);
        }

        /// <summary>
        /// Returns true if ServiceBundleServiceDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceBundleServiceDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceBundleServiceDetail other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    ChargingTriggerInfo == other.ChargingTriggerInfo ||
                    ChargingTriggerInfo != null &&
                    ChargingTriggerInfo.Equals(other.ChargingTriggerInfo)
                ) && 
                (
                    EventLimitQuantity == other.EventLimitQuantity ||
                    EventLimitQuantity != null &&
                    EventLimitQuantity.Equals(other.EventLimitQuantity)
                ) && 
                (
                    FreeEventQuantity == other.FreeEventQuantity ||
                    FreeEventQuantity != null &&
                    FreeEventQuantity.Equals(other.FreeEventQuantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (ChargingTriggerInfo != null)
                    hashCode = hashCode * 59 + ChargingTriggerInfo.GetHashCode();
                    if (EventLimitQuantity != null)
                    hashCode = hashCode * 59 + EventLimitQuantity.GetHashCode();
                    if (FreeEventQuantity != null)
                    hashCode = hashCode * 59 + FreeEventQuantity.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServiceBundleServiceDetail left, ServiceBundleServiceDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceBundleServiceDetail left, ServiceBundleServiceDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
