/*
 * APIs OpenData do Open Banking Brasil
 *
 * As APIs descritas neste documento são referentes as APIs da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BGB.OpenBanking.Api.Areas.Channels.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Status : IEquatable<Status>
    { 
        /// <summary>
        /// Condição atual da API:   * `OK` - A implementação é totalmente funcional   * `PARTIAL_FAILURE` - Um ou mais endpoints estão indisponíveis   * `UNAVAILABLE` - A implementação completa está indisponível   * `SCHEDULED_OUTAGE` - Uma interrupção anunciada está em vigor 
        /// </summary>
        /// <value>Condição atual da API:   * `OK` - A implementação é totalmente funcional   * `PARTIAL_FAILURE` - Um ou mais endpoints estão indisponíveis   * `UNAVAILABLE` - A implementação completa está indisponível   * `SCHEDULED_OUTAGE` - Uma interrupção anunciada está em vigor </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum OKEnum for OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OKEnum = 0,
            /// <summary>
            /// Enum PARTIALFAILUREEnum for PARTIAL_FAILURE
            /// </summary>
            [EnumMember(Value = "PARTIAL_FAILURE")]
            PARTIALFAILUREEnum = 1,
            /// <summary>
            /// Enum UNAVAILABLEEnum for UNAVAILABLE
            /// </summary>
            [EnumMember(Value = "UNAVAILABLE")]
            UNAVAILABLEEnum = 2,
            /// <summary>
            /// Enum SCHEDULEDOUTAGEEnum for SCHEDULED_OUTAGE
            /// </summary>
            [EnumMember(Value = "SCHEDULED_OUTAGE")]
            SCHEDULEDOUTAGEEnum = 3        }

        /// <summary>
        /// Condição atual da API:   * &#x60;OK&#x60; - A implementação é totalmente funcional   * &#x60;PARTIAL_FAILURE&#x60; - Um ou mais endpoints estão indisponíveis   * &#x60;UNAVAILABLE&#x60; - A implementação completa está indisponível   * &#x60;SCHEDULED_OUTAGE&#x60; - Uma interrupção anunciada está em vigor 
        /// </summary>
        /// <value>Condição atual da API:   * &#x60;OK&#x60; - A implementação é totalmente funcional   * &#x60;PARTIAL_FAILURE&#x60; - Um ou mais endpoints estão indisponíveis   * &#x60;UNAVAILABLE&#x60; - A implementação completa está indisponível   * &#x60;SCHEDULED_OUTAGE&#x60; - Uma interrupção anunciada está em vigor </value>
        [DataMember(Name="code")]
        public CodeEnum? Code { get; set; }

        /// <summary>
        /// Fornece uma explicação da interrupção atual que pode ser exibida para um cliente final. Será obrigatoriamente preenchido se code tiver algum valor que não seja OK
        /// </summary>
        /// <value>Fornece uma explicação da interrupção atual que pode ser exibida para um cliente final. Será obrigatoriamente preenchido se code tiver algum valor que não seja OK</value>
        [DataMember(Name="explanation")]
        public string Explanation { get; set; }

        /// <summary>
        /// A data e hora em que a interrupção atual foi detectada. Será obrigatoriamente preenchido se a propriedade code for PARTIAL_FAILURE ou UNAVAILABLE
        /// </summary>
        /// <value>A data e hora em que a interrupção atual foi detectada. Será obrigatoriamente preenchido se a propriedade code for PARTIAL_FAILURE ou UNAVAILABLE</value>
        [DataMember(Name="detectionTime")]
        public string DetectionTime { get; set; }

        /// <summary>
        /// A data e hora em que o serviço completo deve continuar (se conhecido). Será obrigatoriamente preenchido se code tiver algum valor que não seja OK
        /// </summary>
        /// <value>A data e hora em que o serviço completo deve continuar (se conhecido). Será obrigatoriamente preenchido se code tiver algum valor que não seja OK</value>
        [DataMember(Name="expectedResolutionTime")]
        public string ExpectedResolutionTime { get; set; }

        /// <summary>
        /// A data e hora em que esse status foi atualizado pela última vez pelo titular dos dados.
        /// </summary>
        /// <value>A data e hora em que esse status foi atualizado pela última vez pelo titular dos dados.</value>
        [DataMember(Name="updateTime")]
        public string UpdateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Status {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  DetectionTime: ").Append(DetectionTime).Append("\n");
            sb.Append("  ExpectedResolutionTime: ").Append(ExpectedResolutionTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Status)obj);
        }

        /// <summary>
        /// Returns true if Status instances are equal
        /// </summary>
        /// <param name="other">Instance of Status to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Status other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Explanation == other.Explanation ||
                    Explanation != null &&
                    Explanation.Equals(other.Explanation)
                ) && 
                (
                    DetectionTime == other.DetectionTime ||
                    DetectionTime != null &&
                    DetectionTime.Equals(other.DetectionTime)
                ) && 
                (
                    ExpectedResolutionTime == other.ExpectedResolutionTime ||
                    ExpectedResolutionTime != null &&
                    ExpectedResolutionTime.Equals(other.ExpectedResolutionTime)
                ) && 
                (
                    UpdateTime == other.UpdateTime ||
                    UpdateTime != null &&
                    UpdateTime.Equals(other.UpdateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Explanation != null)
                    hashCode = hashCode * 59 + Explanation.GetHashCode();
                    if (DetectionTime != null)
                    hashCode = hashCode * 59 + DetectionTime.GetHashCode();
                    if (ExpectedResolutionTime != null)
                    hashCode = hashCode * 59 + ExpectedResolutionTime.GetHashCode();
                    if (UpdateTime != null)
                    hashCode = hashCode * 59 + UpdateTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Status left, Status right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Status left, Status right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
