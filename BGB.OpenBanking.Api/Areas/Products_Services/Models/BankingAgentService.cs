/*
 * APIs OpenData do Open Banking Brasil
 *
 * As APIs descritas neste documento são referentes as APIs da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BGB.OpenBanking.Api.Areas.Products_Services.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class BankingAgentService : IEquatable<BankingAgentService>
    {
        /// <summary>
        /// Relação dos Nomes de serviços prestados pelo Correspondente
        /// </summary>
        /// <value>Relação dos Nomes de serviços prestados pelo Correspondente</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum RECEPCAOENCAMINHAMENTOPROPOSTASABERTURACONTASDEPOSITOSVISTAPRAZOPOUPANCAMANTIDOSINSTITUICAOCONTRATANTEEnum for RECEPCAO_ENCAMINHAMENTO_PROPOSTAS_ABERTURA_CONTAS_DEPOSITOS_VISTA_PRAZO_POUPANCA_MANTIDOS_INSTITUICAO_CONTRATANTE
            /// </summary>
            [EnumMember(Value = "RECEPCAO_ENCAMINHAMENTO_PROPOSTAS_ABERTURA_CONTAS_DEPOSITOS_VISTA_PRAZO_POUPANCA_MANTIDOS_INSTITUICAO_CONTRATANTE")]
            RECEPCAOENCAMINHAMENTOPROPOSTASABERTURACONTASDEPOSITOSVISTAPRAZOPOUPANCAMANTIDOSINSTITUICAOCONTRATANTEEnum = 0,

            /// <summary>
            /// Enum REALIZACAORECEBIMENTOSPAGAMENTOSTRANSFERENCIASELETRONICASVISANDOMOVIMENTACAOCONTASDEPOSITOSTITULARIDADECLIENTESMANTIDASINSTITUICAOCONTRATANTEEnum for REALIZACAO_RECEBIMENTOS_PAGAMENTOS_TRANSFERENCIAS_ELETRONICAS_VISANDO_MOVIMENTACAO_CONTAS_DEPOSITOS_TITULARIDADE_CLIENTES_MANTIDAS_INSTITUICAO_CONTRATANTE
            /// </summary>
            [EnumMember(Value = "REALIZACAO_RECEBIMENTOS_PAGAMENTOS_TRANSFERENCIAS_ELETRONICAS_VISANDO_MOVIMENTACAO_CONTAS_DEPOSITOS_TITULARIDADE_CLIENTES_MANTIDAS_INSTITUICAO_CONTRATANTE")]
            REALIZACAORECEBIMENTOSPAGAMENTOSTRANSFERENCIASELETRONICASVISANDOMOVIMENTACAOCONTASDEPOSITOSTITULARIDADECLIENTESMANTIDASINSTITUICAOCONTRATANTEEnum = 1,

            /// <summary>
            /// Enum RECEBIMENTOSPAGAMENTOSQUALQUERNATUREZAOUTRASATIVIDADESDECORRENTESEXECUCAOCONTRATOSCONVENIOSPRESTACAOSERVICOSEnum for RECEBIMENTOS_PAGAMENTOS_QUALQUER_NATUREZA_OUTRAS_ATIVIDADES_DECORRENTES_EXECUCAO_CONTRATOS_CONVENIOS_PRESTACAO_SERVICOS
            /// </summary>
            [EnumMember(Value = "RECEBIMENTOS_PAGAMENTOS_QUALQUER_NATUREZA_OUTRAS_ATIVIDADES_DECORRENTES_EXECUCAO_CONTRATOS_CONVENIOS_PRESTACAO_SERVICOS")]
            RECEBIMENTOSPAGAMENTOSQUALQUERNATUREZAOUTRASATIVIDADESDECORRENTESEXECUCAOCONTRATOSCONVENIOSPRESTACAOSERVICOSEnum = 2,

            /// <summary>
            /// Enum EXECUCAOATIVAPASSIVAORDENSPAGAMENTOCURSADASINTERMEDIOINSTITUICAOCONTRATANTESOLICITACAOCLIENTESUSUARIOSEnum for EXECUCAO_ATIVA_PASSIVA_ORDENS_PAGAMENTO_CURSADAS_INTERMEDIO_INSTITUICAO_CONTRATANTE_SOLICITACAO_CLIENTES_USUARIOS
            /// </summary>
            [EnumMember(Value = "EXECUCAO_ATIVA_PASSIVA_ORDENS_PAGAMENTO_CURSADAS_INTERMEDIO_INSTITUICAO_CONTRATANTE_SOLICITACAO_CLIENTES_USUARIOS")]
            EXECUCAOATIVAPASSIVAORDENSPAGAMENTOCURSADASINTERMEDIOINSTITUICAOCONTRATANTESOLICITACAOCLIENTESUSUARIOSEnum = 3,

            /// <summary>
            /// Enum RECEPCAOENCAMINHAMENTOPROPOSTASOPERACAOCREDITOARRENDAMENTOMERCANTILCONCESSAOINSTITUICAOCONTRATANTEEnum for RECEPCAO_ENCAMINHAMENTO_PROPOSTAS_OPERACAO_CREDITO_ARRENDAMENTO_MERCANTIL_CONCESSAO_INSTITUICAO_CONTRATANTE
            /// </summary>
            [EnumMember(Value = "RECEPCAO_ENCAMINHAMENTO_PROPOSTAS_OPERACAO_CREDITO_ARRENDAMENTO_MERCANTIL_CONCESSAO_INSTITUICAO_CONTRATANTE")]
            RECEPCAOENCAMINHAMENTOPROPOSTASOPERACAOCREDITOARRENDAMENTOMERCANTILCONCESSAOINSTITUICAOCONTRATANTEEnum = 4,

            /// <summary>
            /// Enum RECEBIMENTOSPAGAMENTOSRELACIONADOSLETRASCAMBIOACEITEINSTITUICAOCONTRATANTEEnum for RECEBIMENTOS_PAGAMENTOS_RELACIONADOS_LETRAS_CAMBIO_ACEITE_INSTITUICAO_CONTRATANTE
            /// </summary>
            [EnumMember(Value = "RECEBIMENTOS_PAGAMENTOS_RELACIONADOS_LETRAS_CAMBIO_ACEITE_INSTITUICAO_CONTRATANTE")]
            RECEBIMENTOSPAGAMENTOSRELACIONADOSLETRASCAMBIOACEITEINSTITUICAOCONTRATANTEEnum = 5,

            /// <summary>
            /// Enum RECEPCAOENCAMINHAMENTOPROPOSTASFORNECIMENTOCARTAOCREDITORESPONSABILIDADEINSTITUICAOCONTRATANTEEnum for RECEPCAO_ENCAMINHAMENTO_PROPOSTAS_FORNECIMENTO_CARTAO_CREDITO_RESPONSABILIDADE_INSTITUICAO_CONTRATANTE
            /// </summary>
            [EnumMember(Value = "RECEPCAO_ENCAMINHAMENTO_PROPOSTAS_FORNECIMENTO_CARTAO_CREDITO_RESPONSABILIDADE_INSTITUICAO_CONTRATANTE")]
            RECEPCAOENCAMINHAMENTOPROPOSTASFORNECIMENTOCARTAOCREDITORESPONSABILIDADEINSTITUICAOCONTRATANTEEnum = 6,

            /// <summary>
            /// Enum REALIZACAOOPERACOESCAMBIORESPONSABILIDADEINSTITUICAOCONTRATANTEEnum for REALIZACAO_OPERACOES_CAMBIO_RESPONSABILIDADE_INSTITUICAO_CONTRATANTE
            /// </summary>
            [EnumMember(Value = "REALIZACAO_OPERACOES_CAMBIO_RESPONSABILIDADE_INSTITUICAO_CONTRATANTE")]
            REALIZACAOOPERACOESCAMBIORESPONSABILIDADEINSTITUICAOCONTRATANTEEnum = 7,

            /// <summary>
            /// Enum OUTROSEnum for OUTROS
            /// </summary>
            [EnumMember(Value = "OUTROS")]
            OUTROSEnum = 8
        }

        /// <summary>
        /// Relação dos Nomes de serviços prestados pelo Correspondente
        /// </summary>
        /// <value>Relação dos Nomes de serviços prestados pelo Correspondente</value>
        [Required]
        [DataMember(Name = "name")]
        public NameEnum? Name { get; set; }

        /// <summary>
        /// > Relação dos Códigos relativos aos serviços prestados pelo Correspondente  * `RECEBE_ENCAMINHA_PROPOSTAS_ABERTURA_CONTAS` - Recepção e encaminhamento de propostas de abertura de contas  * `REALIZA_RECEBIMENTOS_PAGAMENTOS_TRANSFERENCIAS_ELETRONICAS` - Realização de recebimentos, pagamentos e transferências eletrônicas  * `RECEBIMENTOS_PAGAMENTOS_QUALQUER_NATUREZA_EXECUCAO_CONTRATOS_CONVENIO` - Recebimentos e pagamentos de qualquer natureza  * `EXECUCAO_ATIVA_PASSIVA_ORDENS_PAGAMENTO` - Execução ativa e passiva de ordens de pagamento  * `RECEBE_ENCAMINHA_PROPOSTAS_CREDITO_ARRENDAMENTO_MERCANTIL` - Recepção e encaminhamento de propostas de operações de crédito e de arrendamento mercantil  * `RECEBE_PAGAMENTOS_RELACIONADOS_LETRAS_CAMBIO_ACEITE_INSTITUICAO` - Recebimento e pagamentos relacionados a letras de câmbio de aceite da instituição  * `RECEBE_ENCAMINHA_PROPOSTAS_FORNECIMENTO_CARTAO_CREDITO` - Recepção e encaminhamento de propostas de fornecimento de cartões de crédito  * `REALIZA_OPERACOES_CAMBIO` - Realização de operações de câmbio  * `OUTROS` - Outros
        /// </summary>
        /// <value>> Relação dos Códigos relativos aos serviços prestados pelo Correspondente  * `RECEBE_ENCAMINHA_PROPOSTAS_ABERTURA_CONTAS` - Recepção e encaminhamento de propostas de abertura de contas  * `REALIZA_RECEBIMENTOS_PAGAMENTOS_TRANSFERENCIAS_ELETRONICAS` - Realização de recebimentos, pagamentos e transferências eletrônicas  * `RECEBIMENTOS_PAGAMENTOS_QUALQUER_NATUREZA_EXECUCAO_CONTRATOS_CONVENIO` - Recebimentos e pagamentos de qualquer natureza  * `EXECUCAO_ATIVA_PASSIVA_ORDENS_PAGAMENTO` - Execução ativa e passiva de ordens de pagamento  * `RECEBE_ENCAMINHA_PROPOSTAS_CREDITO_ARRENDAMENTO_MERCANTIL` - Recepção e encaminhamento de propostas de operações de crédito e de arrendamento mercantil  * `RECEBE_PAGAMENTOS_RELACIONADOS_LETRAS_CAMBIO_ACEITE_INSTITUICAO` - Recebimento e pagamentos relacionados a letras de câmbio de aceite da instituição  * `RECEBE_ENCAMINHA_PROPOSTAS_FORNECIMENTO_CARTAO_CREDITO` - Recepção e encaminhamento de propostas de fornecimento de cartões de crédito  * `REALIZA_OPERACOES_CAMBIO` - Realização de operações de câmbio  * `OUTROS` - Outros</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum RECEBEENCAMINHAPROPOSTASABERTURACONTASEnum for RECEBE_ENCAMINHA_PROPOSTAS_ABERTURA_CONTAS
            /// </summary>
            [EnumMember(Value = "RECEBE_ENCAMINHA_PROPOSTAS_ABERTURA_CONTAS")]
            RECEBEENCAMINHAPROPOSTASABERTURACONTASEnum = 0,

            /// <summary>
            /// Enum REALIZARECEBIMENTOSPAGAMENTOSTRANSFERENCIASELETRONICASEnum for REALIZA_RECEBIMENTOS_PAGAMENTOS_TRANSFERENCIAS_ELETRONICAS
            /// </summary>
            [EnumMember(Value = "REALIZA_RECEBIMENTOS_PAGAMENTOS_TRANSFERENCIAS_ELETRONICAS")]
            REALIZARECEBIMENTOSPAGAMENTOSTRANSFERENCIASELETRONICASEnum = 1,

            /// <summary>
            /// Enum RECEBIMENTOSPAGAMENTOSQUALQUERNATUREZAEXECUCAOCONTRATOSCONVENIOEnum for RECEBIMENTOS_PAGAMENTOS_QUALQUER_NATUREZA_EXECUCAO_CONTRATOS_CONVENIO
            /// </summary>
            [EnumMember(Value = "RECEBIMENTOS_PAGAMENTOS_QUALQUER_NATUREZA_EXECUCAO_CONTRATOS_CONVENIO")]
            RECEBIMENTOSPAGAMENTOSQUALQUERNATUREZAEXECUCAOCONTRATOSCONVENIOEnum = 2,

            /// <summary>
            /// Enum EXECUCAOATIVAPASSIVAORDENSPAGAMENTOEnum for EXECUCAO_ATIVA_PASSIVA_ORDENS_PAGAMENTO
            /// </summary>
            [EnumMember(Value = "EXECUCAO_ATIVA_PASSIVA_ORDENS_PAGAMENTO")]
            EXECUCAOATIVAPASSIVAORDENSPAGAMENTOEnum = 3,

            /// <summary>
            /// Enum RECEBEENCAMINHAPROPOSTASCREDITOARRENDAMENTOMERCANTILEnum for RECEBE_ENCAMINHA_PROPOSTAS_CREDITO_ARRENDAMENTO_MERCANTIL
            /// </summary>
            [EnumMember(Value = "RECEBE_ENCAMINHA_PROPOSTAS_CREDITO_ARRENDAMENTO_MERCANTIL")]
            RECEBEENCAMINHAPROPOSTASCREDITOARRENDAMENTOMERCANTILEnum = 4,

            /// <summary>
            /// Enum RECEBEPAGAMENTOSRELACIONADOSLETRASCAMBIOACEITEINSTITUICAOEnum for RECEBE_PAGAMENTOS_RELACIONADOS_LETRAS_CAMBIO_ACEITE_INSTITUICAO
            /// </summary>
            [EnumMember(Value = "RECEBE_PAGAMENTOS_RELACIONADOS_LETRAS_CAMBIO_ACEITE_INSTITUICAO")]
            RECEBEPAGAMENTOSRELACIONADOSLETRASCAMBIOACEITEINSTITUICAOEnum = 5,

            /// <summary>
            /// Enum RECEBEENCAMINHAPROPOSTASFORNECIMENTOCARTAOCREDITOEnum for RECEBE_ENCAMINHA_PROPOSTAS_FORNECIMENTO_CARTAO_CREDITO
            /// </summary>
            [EnumMember(Value = "RECEBE_ENCAMINHA_PROPOSTAS_FORNECIMENTO_CARTAO_CREDITO")]
            RECEBEENCAMINHAPROPOSTASFORNECIMENTOCARTAOCREDITOEnum = 6,

            /// <summary>
            /// Enum REALIZAOPERACOESCAMBIOEnum for REALIZA_OPERACOES_CAMBIO
            /// </summary>
            [EnumMember(Value = "REALIZA_OPERACOES_CAMBIO")]
            REALIZAOPERACOESCAMBIOEnum = 7,

            /// <summary>
            /// Enum OUTROSEnum for OUTROS
            /// </summary>
            [EnumMember(Value = "OUTROS")]
            OUTROSEnum = 8
        }

        /// <summary>
        /// &gt; Relação dos Códigos relativos aos serviços prestados pelo Correspondente  * &#x60;RECEBE_ENCAMINHA_PROPOSTAS_ABERTURA_CONTAS&#x60; - Recepção e encaminhamento de propostas de abertura de contas  * &#x60;REALIZA_RECEBIMENTOS_PAGAMENTOS_TRANSFERENCIAS_ELETRONICAS&#x60; - Realização de recebimentos, pagamentos e transferências eletrônicas  * &#x60;RECEBIMENTOS_PAGAMENTOS_QUALQUER_NATUREZA_EXECUCAO_CONTRATOS_CONVENIO&#x60; - Recebimentos e pagamentos de qualquer natureza  * &#x60;EXECUCAO_ATIVA_PASSIVA_ORDENS_PAGAMENTO&#x60; - Execução ativa e passiva de ordens de pagamento  * &#x60;RECEBE_ENCAMINHA_PROPOSTAS_CREDITO_ARRENDAMENTO_MERCANTIL&#x60; - Recepção e encaminhamento de propostas de operações de crédito e de arrendamento mercantil  * &#x60;RECEBE_PAGAMENTOS_RELACIONADOS_LETRAS_CAMBIO_ACEITE_INSTITUICAO&#x60; - Recebimento e pagamentos relacionados a letras de câmbio de aceite da instituição  * &#x60;RECEBE_ENCAMINHA_PROPOSTAS_FORNECIMENTO_CARTAO_CREDITO&#x60; - Recepção e encaminhamento de propostas de fornecimento de cartões de crédito  * &#x60;REALIZA_OPERACOES_CAMBIO&#x60; - Realização de operações de câmbio  * &#x60;OUTROS&#x60; - Outros
        /// </summary>
        /// <value>&gt; Relação dos Códigos relativos aos serviços prestados pelo Correspondente  * &#x60;RECEBE_ENCAMINHA_PROPOSTAS_ABERTURA_CONTAS&#x60; - Recepção e encaminhamento de propostas de abertura de contas  * &#x60;REALIZA_RECEBIMENTOS_PAGAMENTOS_TRANSFERENCIAS_ELETRONICAS&#x60; - Realização de recebimentos, pagamentos e transferências eletrônicas  * &#x60;RECEBIMENTOS_PAGAMENTOS_QUALQUER_NATUREZA_EXECUCAO_CONTRATOS_CONVENIO&#x60; - Recebimentos e pagamentos de qualquer natureza  * &#x60;EXECUCAO_ATIVA_PASSIVA_ORDENS_PAGAMENTO&#x60; - Execução ativa e passiva de ordens de pagamento  * &#x60;RECEBE_ENCAMINHA_PROPOSTAS_CREDITO_ARRENDAMENTO_MERCANTIL&#x60; - Recepção e encaminhamento de propostas de operações de crédito e de arrendamento mercantil  * &#x60;RECEBE_PAGAMENTOS_RELACIONADOS_LETRAS_CAMBIO_ACEITE_INSTITUICAO&#x60; - Recebimento e pagamentos relacionados a letras de câmbio de aceite da instituição  * &#x60;RECEBE_ENCAMINHA_PROPOSTAS_FORNECIMENTO_CARTAO_CREDITO&#x60; - Recepção e encaminhamento de propostas de fornecimento de cartões de crédito  * &#x60;REALIZA_OPERACOES_CAMBIO&#x60; - Realização de operações de câmbio  * &#x60;OUTROS&#x60; - Outros</value>
        [Required]
        [DataMember(Name = "code")]
        public CodeEnum? Code { get; set; }

        /// <summary>
        /// Campo aberto para detalhamento
        /// </summary>
        /// <value>Campo aberto para detalhamento</value>
        [DataMember(Name = "additionalInfo")]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingAgentService {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BankingAgentService)obj);
        }

        /// <summary>
        /// Returns true if BankingAgentService instances are equal
        /// </summary>
        /// <param name="other">Instance of BankingAgentService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingAgentService other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) &&
                (
                    AdditionalInfo == other.AdditionalInfo ||
                    AdditionalInfo != null &&
                    AdditionalInfo.Equals(other.AdditionalInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                if (AdditionalInfo != null)
                    hashCode = hashCode * 59 + AdditionalInfo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(BankingAgentService left, BankingAgentService right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BankingAgentService left, BankingAgentService right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}