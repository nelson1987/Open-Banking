/*
 * APIs OpenData do Open Banking Brasil
 *
 * As APIs descritas neste documento são referentes as APIs da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BGB.OpenBanking.Api.Areas.Products_Services.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class BranchAvailabilityStandards : IEquatable<BranchAvailabilityStandards>
    {
        /// <summary>
        /// Dia da semana de abertura da dependência bancária
        /// </summary>
        /// <value>Dia da semana de abertura da dependência bancária</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum WeekdayEnum
        {
            /// <summary>
            /// Enum DOMINGOEnum for DOMINGO
            /// </summary>
            [EnumMember(Value = "DOMINGO")]
            DOMINGOEnum = 0,

            /// <summary>
            /// Enum SEGUNDAFEIRAEnum for SEGUNDA_FEIRA
            /// </summary>
            [EnumMember(Value = "SEGUNDA_FEIRA")]
            SEGUNDAFEIRAEnum = 1,

            /// <summary>
            /// Enum TERCAFEIRAEnum for TERCA_FEIRA
            /// </summary>
            [EnumMember(Value = "TERCA_FEIRA")]
            TERCAFEIRAEnum = 2,

            /// <summary>
            /// Enum QUARTAFEIRAEnum for QUARTA_FEIRA
            /// </summary>
            [EnumMember(Value = "QUARTA_FEIRA")]
            QUARTAFEIRAEnum = 3,

            /// <summary>
            /// Enum QUINTAFEIRAEnum for QUINTA_FEIRA
            /// </summary>
            [EnumMember(Value = "QUINTA_FEIRA")]
            QUINTAFEIRAEnum = 4,

            /// <summary>
            /// Enum SEXTAFEIRAEnum for SEXTA_FEIRA
            /// </summary>
            [EnumMember(Value = "SEXTA_FEIRA")]
            SEXTAFEIRAEnum = 5,

            /// <summary>
            /// Enum SABADOEnum for SABADO
            /// </summary>
            [EnumMember(Value = "SABADO")]
            SABADOEnum = 6
        }

        /// <summary>
        /// Dia da semana de abertura da dependência bancária
        /// </summary>
        /// <value>Dia da semana de abertura da dependência bancária</value>
        [Required]
        [DataMember(Name = "weekday")]
        public WeekdayEnum? Weekday { get; set; }

        /// <summary>
        /// Horário de abertura da dependência bancária (UTC)
        /// </summary>
        /// <value>Horário de abertura da dependência bancária (UTC)</value>
        [Required]
        [DataMember(Name = "openingTime")]
        public string OpeningTime { get; set; }

        /// <summary>
        /// Horário de fechamento da dependência bancária (UTC)
        /// </summary>
        /// <value>Horário de fechamento da dependência bancária (UTC)</value>
        [Required]
        [DataMember(Name = "closingTime")]
        public string ClosingTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BranchAvailabilityStandards {\n");
            sb.Append("  Weekday: ").Append(Weekday).Append("\n");
            sb.Append("  OpeningTime: ").Append(OpeningTime).Append("\n");
            sb.Append("  ClosingTime: ").Append(ClosingTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BranchAvailabilityStandards)obj);
        }

        /// <summary>
        /// Returns true if BranchAvailabilityStandards instances are equal
        /// </summary>
        /// <param name="other">Instance of BranchAvailabilityStandards to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BranchAvailabilityStandards other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Weekday == other.Weekday ||
                    Weekday != null &&
                    Weekday.Equals(other.Weekday)
                ) &&
                (
                    OpeningTime == other.OpeningTime ||
                    OpeningTime != null &&
                    OpeningTime.Equals(other.OpeningTime)
                ) &&
                (
                    ClosingTime == other.ClosingTime ||
                    ClosingTime != null &&
                    ClosingTime.Equals(other.ClosingTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Weekday != null)
                    hashCode = hashCode * 59 + Weekday.GetHashCode();
                if (OpeningTime != null)
                    hashCode = hashCode * 59 + OpeningTime.GetHashCode();
                if (ClosingTime != null)
                    hashCode = hashCode * 59 + ClosingTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(BranchAvailabilityStandards left, BranchAvailabilityStandards right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BranchAvailabilityStandards left, BranchAvailabilityStandards right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}