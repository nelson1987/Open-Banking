/*
 * APIs OpenData do Open Banking Brasil
 *
 * As APIs descritas neste documento são referentes as APIs da fase OpenData do Open Banking Brasil.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace BGB.OpenBanking.Api.Areas.Products_Services.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class BankingAgent : IEquatable<BankingAgent>
    {
        /// <summary>
        /// Gets or Sets Identification
        /// </summary>
        [Required]
        [DataMember(Name = "identification")]
        public BankingAgentIdentification Identification { get; set; }

        /// <summary>
        /// Relação de informações referentes as localizações dos Correspondentes bancários.
        /// </summary>
        /// <value>Relação de informações referentes as localizações dos Correspondentes bancários.</value>
        [Required]
        [DataMember(Name = "locations")]
        public List<BankingAgentLocation> Locations { get; set; }

        /// <summary>
        /// Traz a relação de serviços disponbilizados pelo Canal de Atendimento
        /// </summary>
        /// <value>Traz a relação de serviços disponbilizados pelo Canal de Atendimento</value>
        [Required]
        [DataMember(Name = "services")]
        public List<BankingAgentService> Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingAgent {\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BankingAgent)obj);
        }

        /// <summary>
        /// Returns true if BankingAgent instances are equal
        /// </summary>
        /// <param name="other">Instance of BankingAgent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingAgent other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.Equals(other.Identification)
                ) &&
                (
                    Locations == other.Locations ||
                    Locations != null &&
                    Locations.SequenceEqual(other.Locations)
                ) &&
                (
                    Services == other.Services ||
                    Services != null &&
                    Services.SequenceEqual(other.Services)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                if (Locations != null)
                    hashCode = hashCode * 59 + Locations.GetHashCode();
                if (Services != null)
                    hashCode = hashCode * 59 + Services.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(BankingAgent left, BankingAgent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BankingAgent left, BankingAgent right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}